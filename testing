package com.example.fuput_ulfa_171236;

import androidx.appcompat.app.AppCompatActivity;
import androidx.core.app.ActivityCompat;
import androidx.core.content.ContextCompat;

import android.Manifest;
import android.app.Activity;
import android.app.AlertDialog;
import android.app.DatePickerDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.pm.PackageManager;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.net.Uri;
import android.os.Build;
import android.os.Bundle;
import android.os.Environment;
import android.provider.MediaStore;
import android.provider.Settings;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.DatePicker;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.RadioButton;
import android.widget.Toast;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.text.SimpleDateFormat;
import java.util.Calendar;

public class registrasiactivity extends AppCompatActivity {
    EditText nim,nama,alamat,telepon,tempatlahir,tanggallahir;
    RadioButton lakilaki,perempuan;
    CheckBox sepeda,games,membaca,berkumpul,mendaki,sepakbola;
    Button calender,daftar,imagecamera,galeri;
    ImageView gambar;
    Calendar myCalendar;
    String filename;
    AlertDialog dialog;
    private static final int PERMISSION_REQUEST_CODE = 1;
    public static final int MY_PERMISSION_REQUEST_CAMERA =100;
    public static final int MY_PERMISSION_REQUEST_GALERI = 200;
    public static final String ALLOW_KEY = "ALLOWED";
    public static final String CAMERA_PREF = "camera_pref";

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.registrasi_activity);

        nim = findViewById(R.id.nim);
        nama = findViewById(R.id.nama);
        alamat = findViewById(R.id.Alamat);
        telepon = findViewById(R.id.telp);
        tempatlahir = findViewById(R.id.tempatlahir);
        tanggallahir = findViewById(R.id.tanggallahir);
        lakilaki = findViewById(R.id.lakilaki);
        perempuan = findViewById(R.id.perempuan);
        sepeda = findViewById(R.id.bersepeda);
        games = findViewById(R.id.games);
        membaca = findViewById(R.id.membaca);
        berkumpul = findViewById(R.id.kumpul);
        mendaki = findViewById(R.id.mendaki);
        sepakbola = findViewById(R.id.bola);
        calender = findViewById(R.id.btntanggal);
        daftar = findViewById(R.id.daftar);
        imagecamera = findViewById(R.id.capture);
        galeri = findViewById(R.id.galeri);
        gambar = findViewById(R.id.gambar);

        if (Build.VERSION.SDK_INT >= 23){
            if (checkPermission()){
                // Code for above or equal 23 API Oriented Device
                // Your Permission granted already .Do next code
                } else {
                requestPermission();
                // Code for permission
                }
        }
        else {             // Code for Below 23 API Oriented Device             // Do next code         }
            }

             dialog = new AlertDialog.Builder(registrasiactivity.this).create();
                myCalendar = Calendar.getInstance();
                calender.setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        new DatePickerDialog(registrasiactivity.this, new DatePickerDialog.OnDateSetListener() {
                            @Override
                            public void onDateSet(DatePicker view, int year, int month, int dayOfMonth) {
                                myCalendar.set(Calendar.YEAR, year);
                                myCalendar.set(Calendar.MONTH, month);
                                myCalendar.set(Calendar.DAY_OF_MONTH, dayOfMonth);

                                String formatTanggal = "dd-MM-yyyy";
                                SimpleDateFormat sdf = new SimpleDateFormat(formatTanggal);
                                tanggallahir.setText(sdf.format(myCalendar.getTime()));
                            }
                        },
                                myCalendar.get(Calendar.YEAR), myCalendar.get(Calendar.MONTH),
                                myCalendar.get(Calendar.DAY_OF_MONTH)).show();
                    }
                });

                daftar.setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        if (nim.getText().toString().equals("")) {
                            Toast.makeText(getApplicationContext(), "Nim Kosong !", Toast.LENGTH_SHORT).show();
                        } else if (nama.getText().toString().equals("")) {
                            Toast.makeText(getApplicationContext(), "Nama Kosong !", Toast.LENGTH_SHORT).show();
                        } else if (alamat.getText().toString().equals("")) {
                            Toast.makeText(getApplicationContext(), "Alamat Kosong !", Toast.LENGTH_SHORT).show();
                        } else if (telepon.getText().toString().equals("")) {
                            Toast.makeText(getApplicationContext(), "Nomor Telpon Kosong !", Toast.LENGTH_SHORT).show();
                        } else if (tempatlahir.getText().toString().equals("")) {
                            Toast.makeText(getApplicationContext(), "Tempat Lahir Kosong !", Toast.LENGTH_SHORT).show();
                        } else if (tanggallahir.getText().toString().equals("")) {
                            Toast.makeText(getApplicationContext(), "Tanggal Lahir Kosong !", Toast.LENGTH_SHORT).show();
                        } else {
                            PrintWriter pw;
                            try {
                                filename = Environment.getExternalStorageDirectory() + "/"+ nim.getText().toString()+"_"+nama.getText().toString() + ".txt";
                                pw = new PrintWriter(filename);
                                pw.println(nim.getText().toString());
                                pw.println(nama.getText().toString());
                                pw.println(alamat.getText().toString());
                                pw.println(telepon.getText().toString());

                                if (lakilaki.isChecked()) {
                                    pw.println("Laki-Laki");
                                }
                                if (perempuan.isChecked()) {
                                    pw.println("Perempuan");
                                }

                                pw.println(tempatlahir.getText().toString());
                                pw.println(tanggallahir.getText().toString());

                                if (membaca.isChecked()) {
                                    pw.println("Membaca ");
                                }
                                if (games.isChecked()) {
                                    pw.println("Main Game ");
                                }
                                if (sepeda.isChecked()) {
                                    pw.println("Bersepeda ");
                                }
                                if (berkumpul.isChecked()) {
                                    pw.println("Berkumpul Dengan Teman ");
                                }
                                if (mendaki.isChecked()) {
                                    pw.println("Mendaki Gunung ");
                                }
                                if (sepakbola.isChecked()) {
                                    pw.println("Sepak Bola ");
                                }

                                pw.close();
                                dialog.setMessage("Sukses");
                                dialog.show();
                            } catch (FileNotFoundException e) {
                                e.printStackTrace();
                                Toast.makeText(getApplicationContext(), e.toString(), Toast.LENGTH_SHORT).show();
                            }
                        }
                        nim.setText("");
                        nama.setText("");
                        alamat.setText("");
                        lakilaki.setChecked(false);
                        perempuan.setChecked(false);
                        tempatlahir.setText("");
                        tanggallahir.setText("");
                        membaca.setChecked(false);
                        games.setChecked(false);
                        sepeda.setChecked(false);
                        berkumpul.setChecked(false);
                        mendaki.setChecked(false);
                        sepakbola.setChecked(false);

                    }

                });
                imagecamera.setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
                        startActivityForResult(intent, MY_PERMISSION_REQUEST_CAMERA);
                    }
                });
                galeri.setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        Intent intentgaleri = new Intent(Intent.ACTION_PICK);
                        intentgaleri.setType("image/*");
                        startActivityForResult(intentgaleri,MY_PERMISSION_REQUEST_GALERI);
                    }
                });
                if (ContextCompat.checkSelfPermission(this,Manifest.permission.CAMERA)!=PackageManager.PERMISSION_GRANTED){
                    if(getFromPref(this, ALLOW_KEY)){
                        showSettingsAlert();
                    }else if(ContextCompat.checkSelfPermission(this,Manifest.permission.CAMERA) !=PackageManager.PERMISSION_GRANTED){
                        if(ActivityCompat.shouldShowRequestPermissionRationale(this,Manifest.permission.CAMERA)){
                            showAlert();
                        }else{
                            ActivityCompat.requestPermissions(this,new String[]{Manifest.permission.CAMERA},MY_PERMISSION_REQUEST_CAMERA);
                        }

                    }
        }
    }

    private boolean checkPermission(){
        int result  = ContextCompat.checkSelfPermission(registrasiactivity.this, Manifest.permission.WRITE_EXTERNAL_STORAGE);
        if (result == PackageManager.PERMISSION_GRANTED){
            return true;
        }else{
            return false;
        }
    }
    private void requestPermission(){
        if(ActivityCompat.shouldShowRequestPermissionRationale(registrasiactivity.this, Manifest.permission.WRITE_EXTERNAL_STORAGE)){
            Toast.makeText(this, "Write External Storage permission allows us to do store images. Please allow this permission in App Settings", Toast.LENGTH_SHORT).show();
        }else{
            ActivityCompat.requestPermissions(registrasiactivity.this,new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE},PERMISSION_REQUEST_CODE);
        }
    }
    //@Override
   // public void onRequestPermissionsResult(int requestCode, String permissions[], int[] grantResults) {
     //   switch (requestCode) {
       //     case PERMISSION_REQUEST_CODE:
         //       if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
           //         Log.e("value", "Permission Granted, Now you can use local drive .");
             //   } else {
               //     Log.e("value", "Permission Denied, You cannot use local drive ."); }
                //break;
        //}
    //}
    @Override public void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        switch (requestCode) {
            case (MY_PERMISSION_REQUEST_CAMERA):
                if (resultCode == Activity.RESULT_OK) {
                    Bitmap bitmap;
                    bitmap = (Bitmap) data.getExtras().get("data");
                    gambar.setImageBitmap(bitmap);
                }
                break;
            case (MY_PERMISSION_REQUEST_GALERI):
                if (resultCode == Activity.RESULT_OK) {
                    try {
                        final Uri imageUri = data.getData();
                        final InputStream imageStream = getContentResolver().openInputStream(imageUri);
                        final Bitmap selectedImage = BitmapFactory.decodeStream(imageStream);
                        gambar.setImageBitmap(selectedImage);
                    } catch (FileNotFoundException e) {
                        e.printStackTrace();
                        Toast.makeText(getApplicationContext(), "Something went wrong", Toast.LENGTH_LONG).show();
                    }
                }
                break;
        }
    }
    public static void saveToPreferences(Context context, String key, Boolean allowed) {
        SharedPreferences myPrefs = context.getSharedPreferences(CAMERA_PREF, Context.MODE_PRIVATE);
        SharedPreferences.Editor prefsEditor = myPrefs.edit();
        prefsEditor.putBoolean(key, allowed);
        prefsEditor.commit();
    }
    public static Boolean getFromPref(Context context, String key) {
        SharedPreferences myPrefs = context.getSharedPreferences(CAMERA_PREF, Context.MODE_PRIVATE);
        return (myPrefs.getBoolean(key, false));
    }
    private void showAlert() {
        AlertDialog alertDialog = new AlertDialog.Builder(registrasiactivity.this).create();
        alertDialog.setTitle("Alert");
        alertDialog.setMessage("App needs to access the Camera.");
        alertDialog.setButton(AlertDialog.BUTTON_NEGATIVE, "DONT ALLOW", new DialogInterface.OnClickListener() {
            public void onClick(DialogInterface dialog, int which) {
                dialog.dismiss();
                finish();
            }
        });
        alertDialog.setButton(AlertDialog.BUTTON_POSITIVE, "ALLOW", new DialogInterface.OnClickListener() {
            public void onClick(DialogInterface dialog, int which) {
                dialog.dismiss(); ActivityCompat.requestPermissions(registrasiactivity.this, new String[]{Manifest.permission.CAMERA},
                        MY_PERMISSION_REQUEST_CAMERA);
            }
        });
        alertDialog.show();
    }
    private void showSettingsAlert() {
        AlertDialog alertDialog = new AlertDialog.Builder(registrasiactivity.this).create();
        alertDialog.setTitle("Alert"); alertDialog.setMessage("App needs to access the Camera.");
        alertDialog.setButton(AlertDialog.BUTTON_NEGATIVE, "DONT ALLOW", new DialogInterface.OnClickListener() {
            public void onClick(DialogInterface dialog, int which) { dialog.dismiss();
            finish();
            }
        });
        alertDialog.setButton(AlertDialog.BUTTON_POSITIVE, "SETTINGS", new DialogInterface.OnClickListener() {
            public void onClick(DialogInterface dialog, int which) {
                dialog.dismiss();
                startInstalledAppDetailsActivity(registrasiactivity.this); }
        });
        alertDialog.show();
    }
    @Override
    public void onRequestPermissionsResult(int requestCode, String permissions[], int[] grantResults) {
        switch (requestCode) {
            case MY_PERMISSION_REQUEST_CAMERA: {
                for (int i = 0, len = permissions.length; i < len; i++) {
                    String permission = permissions[i]; if (grantResults[i] == PackageManager.PERMISSION_DENIED) {
                        boolean showRationale = ActivityCompat.shouldShowRequestPermissionRationale(this, permission);
                        if (showRationale) { showAlert();
                        } else if (!showRationale) {
                            saveToPreferences(registrasiactivity.this,ALLOW_KEY, true);
                        }
                    }
                }
            }
        }
        switch (requestCode) {
             case PERMISSION_REQUEST_CODE:
               if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                 Log.e("value", "Permission Granted, Now you can use local drive .");
           } else {
            Log.e("value", "Permission Denied, You cannot use local drive ."); }
        break;
        }
    }
    @Override protected void onResume() {
        super.onResume();
    }
    public static void startInstalledAppDetailsActivity(final registrasiactivity context) {
        if (context == null) {
            return;
        } final Intent i = new Intent();
        i.setAction(Settings.ACTION_APPLICATION_DETAILS_SETTINGS);
        i.addCategory(Intent.CATEGORY_DEFAULT);
        i.setData(Uri.parse("package:" + context.getPackageName()));
        i.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
        i.addFlags(Intent.FLAG_ACTIVITY_NO_HISTORY);
        i.addFlags(Intent.FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS);
        context.startActivity(i);
    }
}
